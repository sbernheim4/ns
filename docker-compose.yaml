services:

  client:
    build: ./client
    env_file: ".env"
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app

  server:
    build: ./server
    networks:
      - network
    volumes:
      - ./server/app:/code/app
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file: ".env"
    ports:
      - "80:8000"

  db:
    image: postgres
    restart: always
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - network
    ports:
      - 5432:5432
    env_file: ".env"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  adminer:
    networks:
      - network
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy

  flyway:
    image: flyway/flyway
    networks:
      - network
    command: -url=jdbc:postgresql://db:5432/mydatabase -user=root -password=root migrate
    volumes:
      - ./db/migrations:/flyway/sql
    depends_on:
      db:
        condition: service_healthy

  graphql-server:
    restart: always
    volumes:
      - ./postgraphile/presets:/app/presets
    build:
      context: ./postgraphile
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - network
    ports:
      - 5678:5678
    command:
      "npx postgraphile --config graphile.config.mjs -c ${DATABASE_URL}"
    healthcheck:
      test: ["CMD-SHELL", "curl -X POST 'http://localhost:5678/graphql' -H 'Content-Type: application/json' --data '{\"query\":\"query Healthcheck { __typename }\",\"operationName\":\"Healthcheck\"}' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
  network:

volumes:
  db:
